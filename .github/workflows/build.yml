name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SOLUTION_FILE_PATH: recap_parser.sln
  BUILD_TYPE: Release
  CPP_STANDARD: 20

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      date: ${{ steps.vars.outputs.date }}
      shorthash: ${{ steps.vars.outputs.shorthash }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Extract version from version.txt
      id: extract_version
      run: |
        if [ -f "version.txt" ]; then
          echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
        else
          echo "version=1.0.0" >> $GITHUB_OUTPUT
          echo "1.0.0" > version.txt
          echo "Created version.txt with default version 1.0.0"
        fi
    - name: Get date and git hash
      id: vars
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-windows:
    needs: get-info
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Clone vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        git checkout master
        .\bootstrap-vcpkg.bat

    - name: Setup vcpkg binary caching
      run: |
        echo "VCPKG_BINARY_SOURCES=clear;files,${{ github.workspace }}/vcpkg_binary_cache,readwrite" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
        New-Item -Path "${{ github.workspace }}/vcpkg_binary_cache" -ItemType Directory -Force

    - name: Cache vcpkg binary cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg_binary_cache
        key: ${{ runner.os }}-vcpkg-binaries-${{ hashFiles('vcpkg.json') }}
        restore-keys: ${{ runner.os }}-vcpkg-binaries-

    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg/installed
          ${{ github.workspace }}/vcpkg/packages
          ${{ github.workspace }}/vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('vcpkg-configuration.json', '.vcpkg-root', 'vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}-
          ${{ runner.os }}-vcpkg-

    - name: Build with MSBuild
      shell: cmd
      run: |
        set VCPKG_ROOT=%CD%\vcpkg
        %VCPKG_ROOT%\vcpkg integrate install
        msbuild recap_parser.sln /p:Configuration=Release /p:Platform=x64 /p:LanguageStandard=stdcpp20 /p:AdditionalOptions="/utf-8" /p:VcpkgEnabled=true /p:VcpkgEnableManifest=true /p:VcpkgAutoLink=true /p:VcpkgTriplet=x64-windows /p:PreprocessorDefinitions="_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING;NDEBUG;_CONSOLE"

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: recap-parser-windows
        path: x64/Release/recap_parser.exe

  build-ubuntu:
    needs: get-info
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make cmake libboost-all-dev libpugixml-dev libfmt-dev

    - name: Cache compiled objects
      uses: actions/cache@v4
      with:
        path: build
        key: ${{ runner.os }}-build-${{ hashFiles('**/*.cpp', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Setup CMake
      run: |
        mkdir -p build
        cd build
        cat > CMakeLists.txt << EOF
        cmake_minimum_required(VERSION 3.14)
        project(recap_parser)
        set(CMAKE_CXX_STANDARD 20)
        
        # Find required packages
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(PUGIXML REQUIRED pugixml)
        find_package(Boost REQUIRED COMPONENTS program_options filesystem)
        
        add_executable(recap_parser ../main.cpp ../catalog.cpp ../parser.cpp)
        
        target_include_directories(recap_parser PRIVATE
          ${PUGIXML_INCLUDE_DIRS}
          ${Boost_INCLUDE_DIRS}
        )
        
        target_link_libraries(recap_parser PRIVATE
          ${PUGIXML_LIBRARIES}
          ${Boost_LIBRARIES}
          -lboost_program_options
          pugixml
        )
        EOF
        
    - name: Build
      run: |
        cd build
        cmake .
        make
        
    - name: Prepare output directory
      run: |
        mkdir -p bin_output
        cp build/recap_parser bin_output/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: recap_parser-${{ needs.get-info.outputs.version }}-linux-x64
        path: bin_output/*

  create-release:
    needs: [get-info, build-windows, build-ubuntu]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          cd artifacts
          for dir in */; do
            (cd "$dir" && zip -r "../${dir%/}.zip" .)
          done
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ needs.get-info.outputs.version }}
          name: Recap Parser v${{ needs.get-info.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release of Recap Parser v${{ needs.get-info.outputs.version }}
            
            Date: ${{ needs.get-info.outputs.date }}
            Commit: ${{ needs.get-info.outputs.shorthash }}
          files: artifacts/*.zip